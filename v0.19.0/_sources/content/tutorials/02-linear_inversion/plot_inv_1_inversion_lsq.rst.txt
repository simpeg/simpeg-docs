
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/tutorials/02-linear_inversion/plot_inv_1_inversion_lsq.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_content_tutorials_02-linear_inversion_plot_inv_1_inversion_lsq.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_tutorials_02-linear_inversion_plot_inv_1_inversion_lsq.py:


Linear Least-Squares Inversion
==============================

Here we demonstrate the basics of inverting data with SimPEG by considering a
linear inverse problem. We formulate the inverse problem as a least-squares
optimization problem. For this tutorial, we focus on the following:

    - Defining the forward problem
    - Defining the inverse problem (data misfit, regularization, optimization)
    - Specifying directives for the inversion
    - Recovering a set of model parameters which explains the observations

.. GENERATED FROM PYTHON SOURCE LINES 18-21

Import Modules
--------------


.. GENERATED FROM PYTHON SOURCE LINES 21-41

.. code-block:: default



    import numpy as np
    import matplotlib.pyplot as plt

    from discretize import TensorMesh

    from SimPEG import (
        simulation,
        maps,
        data_misfit,
        directives,
        optimization,
        regularization,
        inverse_problem,
        inversion,
    )

    # sphinx_gallery_thumbnail_number = 3








.. GENERATED FROM PYTHON SOURCE LINES 42-48

Defining the Model and Mapping
------------------------------

Here we generate a synthetic model and a mappig which goes from the model
space to the row space of our linear operator.


.. GENERATED FROM PYTHON SOURCE LINES 48-69

.. code-block:: default


    nParam = 100  # Number of model paramters

    # A 1D mesh is used to define the row-space of the linear operator.
    mesh = TensorMesh([nParam])

    # Creating the true model
    true_model = np.zeros(mesh.nC)
    true_model[mesh.cell_centers_x > 0.3] = 1.0
    true_model[mesh.cell_centers_x > 0.45] = -0.5
    true_model[mesh.cell_centers_x > 0.6] = 0

    # Mapping from the model space to the row space of the linear operator
    model_map = maps.IdentityMap(mesh)

    # Plotting the true model
    fig = plt.figure(figsize=(8, 5))
    ax = fig.add_subplot(111)
    ax.plot(mesh.cell_centers_x, true_model, "b-")
    ax.set_ylim([-2, 2])




.. image-sg:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_001.png
   :alt: plot inv 1 inversion lsq
   :srcset: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-2.0, 2.0)



.. GENERATED FROM PYTHON SOURCE LINES 70-77

Defining the Linear Operator
----------------------------

Here we define the linear operator with dimensions (nData, nParam). In practive,
you may have a problem-specific linear operator which you would like to construct
or load here.


.. GENERATED FROM PYTHON SOURCE LINES 77-108

.. code-block:: default


    # Number of data observations (rows)
    nData = 20

    # Create the linear operator for the tutorial. The columns of the linear operator
    # represents a set of decaying and oscillating functions.
    jk = np.linspace(1.0, 60.0, nData)
    p = -0.25
    q = 0.25


    def g(k):
        return np.exp(p * jk[k] * mesh.cell_centers_x) * np.cos(
            np.pi * q * jk[k] * mesh.cell_centers_x
        )


    G = np.empty((nData, nParam))

    for i in range(nData):
        G[i, :] = g(i)

    # Plot the columns of G
    fig = plt.figure(figsize=(8, 5))
    ax = fig.add_subplot(111)
    for i in range(G.shape[0]):
        ax.plot(G[i, :])

    ax.set_title("Columns of matrix G")





.. image-sg:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_002.png
   :alt: Columns of matrix G
   :srcset: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Columns of matrix G')



.. GENERATED FROM PYTHON SOURCE LINES 109-115

Defining the Simulation
-----------------------

The simulation defines the relationship between the model parameters and
predicted data.


.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: default


    sim = simulation.LinearSimulation(mesh, G=G, model_map=model_map)








.. GENERATED FROM PYTHON SOURCE LINES 119-125

Predict Synthetic Data
----------------------

Here, we use the true model to create synthetic data which we will subsequently
invert.


.. GENERATED FROM PYTHON SOURCE LINES 125-133

.. code-block:: default


    # Standard deviation of Gaussian noise being added
    std = 0.01
    np.random.seed(1)

    # Create a SimPEG data object
    data_obj = sim.make_synthetic_data(true_model, relative_error=std, add_noise=True)








.. GENERATED FROM PYTHON SOURCE LINES 134-143

Define the Inverse Problem
--------------------------

The inverse problem is defined by 3 things:

    1) Data Misfit: a measure of how well our recovered model explains the field data
    2) Regularization: constraints placed on the recovered model and a priori information
    3) Optimization: the numerical approach used to solve the inverse problem


.. GENERATED FROM PYTHON SOURCE LINES 143-159

.. code-block:: default


    # Define the data misfit. Here the data misfit is the L2 norm of the weighted
    # residual between the observed data and the data predicted for a given model.
    # Within the data misfit, the residual between predicted and observed data are
    # normalized by the data's standard deviation.
    dmis = data_misfit.L2DataMisfit(simulation=sim, data=data_obj)

    # Define the regularization (model objective function).
    reg = regularization.WeightedLeastSquares(mesh, alpha_s=1.0, alpha_x=1.0)

    # Define how the optimization problem is solved.
    opt = optimization.InexactGaussNewton(maxIter=50)

    # Here we define the inverse problem that is to be solved
    inv_prob = inverse_problem.BaseInvProblem(dmis, reg, opt)








.. GENERATED FROM PYTHON SOURCE LINES 160-167

Define Inversion Directives
---------------------------

Here we define any directiveas that are carried out during the inversion. This
includes the cooling schedule for the trade-off parameter (beta), stopping
criteria for the inversion and saving inversion results at each iteration.


.. GENERATED FROM PYTHON SOURCE LINES 167-179

.. code-block:: default


    # Defining a starting value for the trade-off parameter (beta) between the data
    # misfit and the regularization.
    starting_beta = directives.BetaEstimate_ByEig(beta0_ratio=1e-4)

    # Setting a stopping criteria for the inversion.
    target_misfit = directives.TargetMisfit()

    # The directives are defined as a list.
    directives_list = [starting_beta, target_misfit]









.. GENERATED FROM PYTHON SOURCE LINES 180-186

Setting a Starting Model and Running the Inversion
--------------------------------------------------

To define the inversion object, we need to define the inversion problem and
the set of directives. We can then run the inversion.


.. GENERATED FROM PYTHON SOURCE LINES 186-196

.. code-block:: default


    # Here we combine the inverse problem and the set of directives
    inv = inversion.BaseInversion(inv_prob, directives_list)

    # Starting model
    starting_model = np.zeros(nParam)

    # Run inversion
    recovered_model = inv.run(starting_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SimPEG.InvProblem will set Regularization.reference_model to m0.
    SimPEG.InvProblem will set Regularization.reference_model to m0.
    SimPEG.InvProblem will set Regularization.reference_model to m0.

                        SimPEG.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.
                        ***Done using the default solver Pardiso and no solver_opts.***
                    
    model has any nan: 0
    ============================ Inexact Gauss Newton ============================
      #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   
    -----------------------------------------------------------------------------
    x0 has any nan: 0
       0  1.86e+02  1.00e+05  0.00e+00  1.00e+05    1.26e+06      0              
       1  1.86e+02  4.68e+04  3.50e-01  4.68e+04    8.00e+04      0              
       2  1.86e+02  3.18e+04  1.35e+00  3.21e+04    5.90e+04      0              
       3  1.86e+02  1.75e+04  5.21e+00  1.85e+04    5.36e+04      0   Skip BFGS  
       4  1.86e+02  1.16e+04  5.18e+00  1.25e+04    8.12e+04      0              
       5  1.86e+02  8.05e+03  8.09e+00  9.55e+03    4.44e+04      0              
       6  1.86e+02  4.39e+03  1.19e+01  6.59e+03    5.39e+04      0              
       7  1.86e+02  3.33e+03  1.24e+01  5.65e+03    2.83e+04      0              
       8  1.86e+02  2.87e+03  1.31e+01  5.30e+03    8.05e+04      0              
       9  1.86e+02  2.38e+03  1.38e+01  4.95e+03    3.99e+04      0              
      10  1.86e+02  1.60e+03  1.55e+01  4.48e+03    6.49e+04      0              
      11  1.86e+02  1.32e+03  1.64e+01  4.37e+03    6.35e+04      0              
      12  1.86e+02  1.19e+03  1.66e+01  4.28e+03    4.79e+04      0              
      13  1.86e+02  1.06e+03  1.70e+01  4.23e+03    6.77e+04      0              
      14  1.86e+02  8.35e+02  1.70e+01  3.99e+03    9.02e+03      0   Skip BFGS  
      15  1.86e+02  7.83e+02  1.69e+01  3.93e+03    2.56e+04      0              
      16  1.86e+02  5.54e+02  1.77e+01  3.84e+03    1.86e+04      0   Skip BFGS  
      17  1.86e+02  5.89e+02  1.73e+01  3.81e+03    1.94e+04      0              
      18  1.86e+02  6.91e+02  1.66e+01  3.78e+03    2.18e+04      0   Skip BFGS  
      19  1.86e+02  6.56e+02  1.68e+01  3.78e+03    2.99e+04      0              
      20  1.86e+02  6.28e+02  1.69e+01  3.77e+03    3.40e+04      0   Skip BFGS  
      21  1.86e+02  6.42e+02  1.68e+01  3.77e+03    3.11e+04      0              
      22  1.86e+02  6.40e+02  1.68e+01  3.76e+03    2.47e+04      0   Skip BFGS  
      23  1.86e+02  6.37e+02  1.68e+01  3.76e+03    2.52e+04      0              
      24  1.86e+02  6.30e+02  1.68e+01  3.75e+03    2.53e+04      0   Skip BFGS  
      25  1.86e+02  6.13e+02  1.69e+01  3.75e+03    2.76e+04      0              
      26  1.86e+02  6.06e+02  1.69e+01  3.75e+03    2.96e+04      0   Skip BFGS  
      27  1.86e+02  6.10e+02  1.69e+01  3.75e+03    2.87e+04      0              
      28  1.86e+02  6.08e+02  1.69e+01  3.75e+03    2.82e+04      0   Skip BFGS  
      29  1.86e+02  6.08e+02  1.69e+01  3.75e+03    2.90e+04      0              
      30  1.86e+02  5.94e+02  1.69e+01  3.75e+03    2.54e+04      0   Skip BFGS  
      31  1.86e+02  5.96e+02  1.69e+01  3.74e+03    2.72e+04      0              
      32  1.86e+02  5.21e+02  1.72e+01  3.72e+03    4.92e+03      0   Skip BFGS  
      33  1.86e+02  5.21e+02  1.72e+01  3.72e+03    4.74e+03      0              
      34  1.86e+02  5.09e+02  1.72e+01  3.72e+03    5.85e+03      0              
      35  1.86e+02  5.15e+02  1.72e+01  3.71e+03    3.00e+03      0   Skip BFGS  
      36  1.86e+02  5.14e+02  1.72e+01  3.71e+03    2.50e+03      0              
      37  1.86e+02  5.14e+02  1.72e+01  3.71e+03    2.28e+03      0   Skip BFGS  
      38  1.86e+02  5.07e+02  1.72e+01  3.71e+03    6.41e+02      0              
      39  1.86e+02  5.01e+02  1.73e+01  3.71e+03    4.41e+02      0   Skip BFGS  
      40  1.86e+02  5.06e+02  1.72e+01  3.71e+03    2.79e+02      0              
      41  1.86e+02  5.09e+02  1.72e+01  3.71e+03    2.56e+02      0   Skip BFGS  
      42  1.86e+02  5.08e+02  1.72e+01  3.71e+03    3.02e+02      0              
      43  1.86e+02  5.13e+02  1.72e+01  3.71e+03    4.58e+02      0   Skip BFGS  
      44  1.86e+02  5.09e+02  1.72e+01  3.71e+03    3.52e+02      0              
      45  1.86e+02  5.09e+02  1.72e+01  3.71e+03    4.42e+02      0   Skip BFGS  
      46  1.86e+02  5.09e+02  1.72e+01  3.71e+03    4.65e+02      0              
      47  1.86e+02  5.08e+02  1.72e+01  3.71e+03    3.65e+02      0   Skip BFGS  
      48  1.86e+02  5.08e+02  1.72e+01  3.71e+03    4.80e+02      0              
      49  1.86e+02  5.08e+02  1.72e+01  3.71e+03    5.24e+02      0   Skip BFGS  
      50  1.86e+02  5.08e+02  1.72e+01  3.71e+03    5.19e+02      0              
    ------------------------- STOP! -------------------------
    1 : |fc-fOld| = 2.5248e-04 <= tolF*(1+|f0|) = 1.0000e+04
    1 : |xc-x_last| = 3.9461e-04 <= tolX*(1+|x0|) = 1.0000e-01
    0 : |proj(x-g)-x|    = 5.1902e+02 <= tolG          = 1.0000e-01
    0 : |proj(x-g)-x|    = 5.1902e+02 <= 1e3*eps       = 1.0000e-02
    1 : maxIter   =      50    <= iter          =     50
    ------------------------- DONE! -------------------------




.. GENERATED FROM PYTHON SOURCE LINES 197-200

Plotting Results
----------------


.. GENERATED FROM PYTHON SOURCE LINES 200-212

.. code-block:: default


    # Observed versus predicted data
    fig, ax = plt.subplots(1, 2, figsize=(12 * 1.2, 4 * 1.2))
    ax[0].plot(data_obj.dobs, "b-")
    ax[0].plot(inv_prob.dpred, "r-")
    ax[0].legend(("Observed Data", "Predicted Data"))

    # True versus recovered model
    ax[1].plot(mesh.cell_centers_x, true_model, "b-")
    ax[1].plot(mesh.cell_centers_x, recovered_model, "r-")
    ax[1].legend(("True Model", "Recovered Model"))
    ax[1].set_ylim([-2, 2])



.. image-sg:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_003.png
   :alt: plot inv 1 inversion lsq
   :srcset: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-2.0, 2.0)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  37.152 seconds)

**Estimated memory usage:**  17 MB


.. _sphx_glr_download_content_tutorials_02-linear_inversion_plot_inv_1_inversion_lsq.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_inv_1_inversion_lsq.py <plot_inv_1_inversion_lsq.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_inv_1_inversion_lsq.ipynb <plot_inv_1_inversion_lsq.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
