
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/tutorials/02-linear_inversion/plot_inv_1_inversion_lsq.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_content_tutorials_02-linear_inversion_plot_inv_1_inversion_lsq.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_tutorials_02-linear_inversion_plot_inv_1_inversion_lsq.py:


Linear Least-Squares Inversion
==============================

Here we demonstrate the basics of inverting data with SimPEG by considering a
linear inverse problem. We formulate the inverse problem as a least-squares
optimization problem. For this tutorial, we focus on the following:

    - Defining the forward problem
    - Defining the inverse problem (data misfit, regularization, optimization)
    - Specifying directives for the inversion
    - Recovering a set of model parameters which explains the observations

.. GENERATED FROM PYTHON SOURCE LINES 18-21

Import Modules
--------------


.. GENERATED FROM PYTHON SOURCE LINES 21-41

.. code-block:: Python



    import numpy as np
    import matplotlib.pyplot as plt

    from discretize import TensorMesh

    from simpeg import (
        simulation,
        maps,
        data_misfit,
        directives,
        optimization,
        regularization,
        inverse_problem,
        inversion,
    )

    # sphinx_gallery_thumbnail_number = 3








.. GENERATED FROM PYTHON SOURCE LINES 42-48

Defining the Model and Mapping
------------------------------

Here we generate a synthetic model and a mappig which goes from the model
space to the row space of our linear operator.


.. GENERATED FROM PYTHON SOURCE LINES 48-69

.. code-block:: Python


    nParam = 100  # Number of model paramters

    # A 1D mesh is used to define the row-space of the linear operator.
    mesh = TensorMesh([nParam])

    # Creating the true model
    true_model = np.zeros(mesh.nC)
    true_model[mesh.cell_centers_x > 0.3] = 1.0
    true_model[mesh.cell_centers_x > 0.45] = -0.5
    true_model[mesh.cell_centers_x > 0.6] = 0

    # Mapping from the model space to the row space of the linear operator
    model_map = maps.IdentityMap(mesh)

    # Plotting the true model
    fig = plt.figure(figsize=(8, 5))
    ax = fig.add_subplot(111)
    ax.plot(mesh.cell_centers_x, true_model, "b-")
    ax.set_ylim([-2, 2])




.. image-sg:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_001.png
   :alt: plot inv 1 inversion lsq
   :srcset: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-2.0, 2.0)



.. GENERATED FROM PYTHON SOURCE LINES 70-77

Defining the Linear Operator
----------------------------

Here we define the linear operator with dimensions (nData, nParam). In practive,
you may have a problem-specific linear operator which you would like to construct
or load here.


.. GENERATED FROM PYTHON SOURCE LINES 77-108

.. code-block:: Python


    # Number of data observations (rows)
    nData = 20

    # Create the linear operator for the tutorial. The columns of the linear operator
    # represents a set of decaying and oscillating functions.
    jk = np.linspace(1.0, 60.0, nData)
    p = -0.25
    q = 0.25


    def g(k):
        return np.exp(p * jk[k] * mesh.cell_centers_x) * np.cos(
            np.pi * q * jk[k] * mesh.cell_centers_x
        )


    G = np.empty((nData, nParam))

    for i in range(nData):
        G[i, :] = g(i)

    # Plot the columns of G
    fig = plt.figure(figsize=(8, 5))
    ax = fig.add_subplot(111)
    for i in range(G.shape[0]):
        ax.plot(G[i, :])

    ax.set_title("Columns of matrix G")





.. image-sg:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_002.png
   :alt: Columns of matrix G
   :srcset: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Columns of matrix G')



.. GENERATED FROM PYTHON SOURCE LINES 109-115

Defining the Simulation
-----------------------

The simulation defines the relationship between the model parameters and
predicted data.


.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: Python


    sim = simulation.LinearSimulation(mesh, G=G, model_map=model_map)








.. GENERATED FROM PYTHON SOURCE LINES 119-125

Predict Synthetic Data
----------------------

Here, we use the true model to create synthetic data which we will subsequently
invert.


.. GENERATED FROM PYTHON SOURCE LINES 125-133

.. code-block:: Python


    # Standard deviation of Gaussian noise being added
    std = 0.01
    np.random.seed(1)

    # Create a SimPEG data object
    data_obj = sim.make_synthetic_data(true_model, relative_error=std, add_noise=True)








.. GENERATED FROM PYTHON SOURCE LINES 134-143

Define the Inverse Problem
--------------------------

The inverse problem is defined by 3 things:

    1) Data Misfit: a measure of how well our recovered model explains the field data
    2) Regularization: constraints placed on the recovered model and a priori information
    3) Optimization: the numerical approach used to solve the inverse problem


.. GENERATED FROM PYTHON SOURCE LINES 143-159

.. code-block:: Python


    # Define the data misfit. Here the data misfit is the L2 norm of the weighted
    # residual between the observed data and the data predicted for a given model.
    # Within the data misfit, the residual between predicted and observed data are
    # normalized by the data's standard deviation.
    dmis = data_misfit.L2DataMisfit(simulation=sim, data=data_obj)

    # Define the regularization (model objective function).
    reg = regularization.WeightedLeastSquares(mesh, alpha_s=1.0, alpha_x=1.0)

    # Define how the optimization problem is solved.
    opt = optimization.InexactGaussNewton(maxIter=50)

    # Here we define the inverse problem that is to be solved
    inv_prob = inverse_problem.BaseInvProblem(dmis, reg, opt)








.. GENERATED FROM PYTHON SOURCE LINES 160-167

Define Inversion Directives
---------------------------

Here we define any directiveas that are carried out during the inversion. This
includes the cooling schedule for the trade-off parameter (beta), stopping
criteria for the inversion and saving inversion results at each iteration.


.. GENERATED FROM PYTHON SOURCE LINES 167-179

.. code-block:: Python


    # Defining a starting value for the trade-off parameter (beta) between the data
    # misfit and the regularization.
    starting_beta = directives.BetaEstimate_ByEig(beta0_ratio=1e-4)

    # Setting a stopping criteria for the inversion.
    target_misfit = directives.TargetMisfit()

    # The directives are defined as a list.
    directives_list = [starting_beta, target_misfit]









.. GENERATED FROM PYTHON SOURCE LINES 180-186

Setting a Starting Model and Running the Inversion
--------------------------------------------------

To define the inversion object, we need to define the inversion problem and
the set of directives. We can then run the inversion.


.. GENERATED FROM PYTHON SOURCE LINES 186-196

.. code-block:: Python


    # Here we combine the inverse problem and the set of directives
    inv = inversion.BaseInversion(inv_prob, directives_list)

    # Starting model
    starting_model = np.zeros(nParam)

    # Run inversion
    recovered_model = inv.run(starting_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Running inversion with SimPEG v0.22.0
    simpeg.InvProblem will set Regularization.reference_model to m0.
    simpeg.InvProblem will set Regularization.reference_model to m0.
    simpeg.InvProblem will set Regularization.reference_model to m0.

                        simpeg.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.
                        ***Done using the default solver Pardiso and no solver_opts.***
                    
    model has any nan: 0
    ============================ Inexact Gauss Newton ============================
      #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   
    -----------------------------------------------------------------------------
    x0 has any nan: 0
       0  1.85e+02  2.00e+05  0.00e+00  2.00e+05    2.48e+06      0              
       1  1.85e+02  9.39e+04  6.94e-01  9.40e+04    1.68e+05      0              
       2  1.85e+02  6.40e+04  2.65e+00  6.45e+04    1.17e+05      0              
       3  1.85e+02  3.67e+04  9.71e+00  3.85e+04    9.84e+04      0   Skip BFGS  
       4  1.85e+02  2.48e+04  9.68e+00  2.66e+04    1.76e+05      0              
       5  1.85e+02  1.74e+04  1.53e+01  2.02e+04    8.73e+04      0              
       6  1.85e+02  9.10e+03  2.35e+01  1.34e+04    1.14e+05      0              
       7  1.85e+02  7.38e+03  2.39e+01  1.18e+04    5.36e+04      0              
       8  1.85e+02  6.43e+03  2.53e+01  1.11e+04    1.37e+05      0              
       9  1.85e+02  2.94e+03  3.17e+01  8.79e+03    1.69e+05      0   Skip BFGS  
      10  1.85e+02  2.65e+03  3.07e+01  8.32e+03    5.77e+04      0              
      11  1.85e+02  2.26e+03  3.24e+01  8.24e+03    1.03e+05      0              
      12  1.85e+02  2.02e+03  3.28e+01  8.09e+03    6.98e+04      0              
      13  1.85e+02  1.92e+03  3.29e+01  8.01e+03    9.21e+04      0   Skip BFGS  
      14  1.85e+02  1.80e+03  3.32e+01  7.94e+03    7.21e+04      0              
      15  1.85e+02  1.73e+03  3.34e+01  7.91e+03    7.71e+04      0   Skip BFGS  
      16  1.85e+02  1.75e+03  3.32e+01  7.88e+03    7.76e+04      0              
      17  1.85e+02  1.11e+03  3.53e+01  7.63e+03    3.05e+04      0   Skip BFGS  
      18  1.85e+02  1.15e+03  3.48e+01  7.59e+03    5.26e+04      0              
      19  1.85e+02  1.10e+03  3.45e+01  7.48e+03    2.85e+04      0   Skip BFGS  
      20  1.85e+02  1.12e+03  3.43e+01  7.47e+03    3.39e+04      0              
      21  1.85e+02  1.14e+03  3.43e+01  7.47e+03    2.47e+04      0              
      22  1.85e+02  1.07e+03  3.41e+01  7.38e+03    2.03e+04      0   Skip BFGS  
      23  1.85e+02  1.14e+03  3.37e+01  7.38e+03    1.87e+04      0              
      24  1.85e+02  1.15e+03  3.37e+01  7.38e+03    1.81e+04      0   Skip BFGS  
      25  1.85e+02  1.14e+03  3.37e+01  7.38e+03    1.89e+04      0              
      26  1.85e+02  1.15e+03  3.37e+01  7.38e+03    1.76e+04      0              
      27  1.85e+02  1.14e+03  3.37e+01  7.38e+03    2.07e+04      0   Skip BFGS  
      28  1.85e+02  1.15e+03  3.37e+01  7.38e+03    1.76e+04      0              
      29  1.85e+02  1.14e+03  3.37e+01  7.37e+03    1.77e+04      0   Skip BFGS  
      30  1.85e+02  1.13e+03  3.37e+01  7.37e+03    1.77e+04      0              
      31  1.85e+02  1.13e+03  3.38e+01  7.37e+03    1.74e+04      0   Skip BFGS  
      32  1.85e+02  1.13e+03  3.37e+01  7.37e+03    1.77e+04      0              
      33  1.85e+02  1.11e+03  3.38e+01  7.36e+03    2.30e+04      0   Skip BFGS  
      34  1.85e+02  1.11e+03  3.38e+01  7.36e+03    1.54e+04      0              
      35  1.85e+02  1.06e+03  3.40e+01  7.34e+03    9.04e+03      0   Skip BFGS  
      36  1.85e+02  1.04e+03  3.41e+01  7.34e+03    3.69e+04      0              
      37  1.85e+02  9.84e+02  3.44e+01  7.34e+03    1.23e+04      0   Skip BFGS  
      38  1.85e+02  9.84e+02  3.44e+01  7.34e+03    1.31e+04      0              
      39  1.85e+02  9.90e+02  3.43e+01  7.34e+03    6.94e+03      0   Skip BFGS  
      40  1.85e+02  9.89e+02  3.43e+01  7.34e+03    1.07e+04      0              
      41  1.85e+02  9.95e+02  3.43e+01  7.34e+03    1.07e+04      0   Skip BFGS  
      42  1.85e+02  9.91e+02  3.43e+01  7.34e+03    7.73e+03      0              
      43  1.85e+02  9.88e+02  3.43e+01  7.34e+03    3.62e+03      0   Skip BFGS  
      44  1.85e+02  9.92e+02  3.43e+01  7.34e+03    8.05e+03      0              
      45  1.85e+02  9.93e+02  3.43e+01  7.34e+03    1.15e+04      0   Skip BFGS  
      46  1.85e+02  9.94e+02  3.43e+01  7.34e+03    1.18e+04      0   Skip BFGS  
      47  1.85e+02  9.94e+02  3.43e+01  7.34e+03    1.17e+04      0              
      48  1.85e+02  9.94e+02  3.43e+01  7.34e+03    1.15e+04      0   Skip BFGS  
      49  1.85e+02  9.94e+02  3.43e+01  7.34e+03    1.17e+04      0              
      50  1.85e+02  9.95e+02  3.43e+01  7.34e+03    1.05e+04      0              
    ------------------------- STOP! -------------------------
    1 : |fc-fOld| = 3.0090e-03 <= tolF*(1+|f0|) = 2.0000e+04
    1 : |xc-x_last| = 8.0228e-04 <= tolX*(1+|x0|) = 1.0000e-01
    0 : |proj(x-g)-x|    = 1.0499e+04 <= tolG          = 1.0000e-01
    0 : |proj(x-g)-x|    = 1.0499e+04 <= 1e3*eps       = 1.0000e-02
    1 : maxIter   =      50    <= iter          =     50
    ------------------------- DONE! -------------------------




.. GENERATED FROM PYTHON SOURCE LINES 197-200

Plotting Results
----------------


.. GENERATED FROM PYTHON SOURCE LINES 200-212

.. code-block:: Python


    # Observed versus predicted data
    fig, ax = plt.subplots(1, 2, figsize=(12 * 1.2, 4 * 1.2))
    ax[0].plot(data_obj.dobs, "b-")
    ax[0].plot(inv_prob.dpred, "r-")
    ax[0].legend(("Observed Data", "Predicted Data"))

    # True versus recovered model
    ax[1].plot(mesh.cell_centers_x, true_model, "b-")
    ax[1].plot(mesh.cell_centers_x, recovered_model, "r-")
    ax[1].legend(("True Model", "Recovered Model"))
    ax[1].set_ylim([-2, 2])



.. image-sg:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_003.png
   :alt: plot inv 1 inversion lsq
   :srcset: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_1_inversion_lsq_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-2.0, 2.0)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 29.288 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_content_tutorials_02-linear_inversion_plot_inv_1_inversion_lsq.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_inv_1_inversion_lsq.ipynb <plot_inv_1_inversion_lsq.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_inv_1_inversion_lsq.py <plot_inv_1_inversion_lsq.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
