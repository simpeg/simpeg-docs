
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/examples/20-published/plot_heagyetal2017_cyl_inversions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_content_examples_20-published_plot_heagyetal2017_cyl_inversions.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_examples_20-published_plot_heagyetal2017_cyl_inversions.py:


Heagy et al., 2017 1D FDEM and TDEM inversions
==============================================

Here, we perform a 1D inversion using both the frequency and time domain
codes. The forward simulations are conducted on a cylindrically symmetric
mesh. The source is a point magnetic dipole source.

This example is used in the paper

    Lindsey J. Heagy, Rowan Cockett, Seogi Kang, Gudni K. Rosenkjaer, Douglas
    W. Oldenburg, A framework for simulation and inversion in electromagnetics,
    Computers & Geosciences, Volume 107, 2017, Pages 1-19, ISSN 0098-3004,
    http://dx.doi.org/10.1016/j.cageo.2017.06.018.

This example is on figshare:
https://doi.org/10.6084/m9.figshare.5035175

This example was updated for SimPEG 0.14.0 on January 31st, 2020 by Joseph Capriotti

.. GENERATED FROM PYTHON SOURCE LINES 21-275



.. image-sg:: /content/examples/20-published/images/sphx_glr_plot_heagyetal2017_cyl_inversions_001.png
   :alt: (a) Recovered Models, (b) FDEM observed vs. predicted, (c) TDEM observed vs. predicted
   :srcset: /content/examples/20-published/images/sphx_glr_plot_heagyetal2017_cyl_inversions_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    min skin depth =  158.11388300841895 max skin depth =  500.0
    max x  1267.687908603637 min z  -1242.6879086036365 max z  1242.687908603637

    Running inversion with SimPEG v0.22.1
    simpeg.InvProblem will set Regularization.reference_model to m0.
    simpeg.InvProblem will set Regularization.reference_model to m0.
    simpeg.InvProblem will set Regularization.reference_model to m0.

                            simpeg.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.
                            ***Done using same Solver, and solver_opts as the Simulation3DMagneticFluxDensity problem***
                        
    model has any nan: 0
    ============================ Inexact Gauss Newton ============================
      #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   
    -----------------------------------------------------------------------------
    x0 has any nan: 0
       0  3.80e+00  1.66e+03  0.00e+00  1.66e+03    1.23e+03      0              
       1  3.80e+00  3.79e+02  6.36e+01  6.20e+02    1.02e+03      0              
       2  3.80e+00  1.09e+02  6.88e+01  3.70e+02    1.80e+02      0              
       3  9.49e-01  1.06e+02  6.38e+01  1.66e+02    1.27e+02      0   Skip BFGS  
       4  9.49e-01  4.95e+01  9.58e+01  1.40e+02    2.63e+02      0              
       5  9.49e-01  3.12e+01  9.02e+01  1.17e+02    4.56e+01      0              
       6  2.37e-01  2.41e+01  9.32e+01  4.62e+01    8.77e+01      0   Skip BFGS  
       7  2.37e-01  1.60e+01  1.12e+02  4.25e+01    1.26e+02      0              
       8  2.37e-01  1.13e+01  1.08e+02  3.69e+01    3.87e+01      0              
       9  5.93e-02  1.11e+01  1.06e+02  1.74e+01    4.43e+01      1   Skip BFGS  
    ------------------------- STOP! -------------------------
    1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 1.6645e+02
    1 : |xc-x_last| = 3.9718e-01 <= tolX*(1+|x0|) = 2.4026e+00
    0 : |proj(x-g)-x|    = 4.4275e+01 <= tolG          = 1.0000e-01
    0 : |proj(x-g)-x|    = 4.4275e+01 <= 1e3*eps       = 1.0000e-02
    0 : maxIter   =      20    <= iter          =     10
    ------------------------- DONE! -------------------------
    min diffusion distance  114.18394340269786 max diffusion distance  510.64611877484225

    Running inversion with SimPEG v0.22.1
    simpeg.InvProblem will set Regularization.reference_model to m0.
    simpeg.InvProblem will set Regularization.reference_model to m0.
    simpeg.InvProblem will set Regularization.reference_model to m0.

                            simpeg.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.
                            ***Done using same Solver, and solver_opts as the Simulation3DMagneticFluxDensity problem***
                        
    model has any nan: 0
    ============================ Inexact Gauss Newton ============================
      #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   
    -----------------------------------------------------------------------------
    x0 has any nan: 0
       0  3.18e+00  3.33e+03  0.00e+00  3.33e+03    1.42e+03      0              
       1  3.18e+00  2.69e+03  1.70e+02  3.22e+03    4.98e+03      0              
       2  3.18e+00  1.51e+02  1.28e+02  5.57e+02    6.90e+02      0              
       3  7.94e-01  1.24e+02  1.05e+02  2.08e+02    5.06e+02      0   Skip BFGS  
       4  7.94e-01  4.22e+01  1.26e+02  1.42e+02    3.74e+02      0              
       5  7.94e-01  1.81e+01  1.14e+02  1.09e+02    2.74e+02      0              
    ------------------------- STOP! -------------------------
    1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 3.3301e+02
    1 : |xc-x_last| = 5.2152e-01 <= tolX*(1+|x0|) = 2.4026e+00
    0 : |proj(x-g)-x|    = 2.7417e+02 <= tolG          = 1.0000e-01
    0 : |proj(x-g)-x|    = 2.7417e+02 <= 1e3*eps       = 1.0000e-02
    0 : maxIter   =      20    <= iter          =      6
    ------------------------- DONE! -------------------------






|

.. code-block:: Python


    import discretize
    from simpeg import (
        maps,
        utils,
        data_misfit,
        regularization,
        optimization,
        inversion,
        inverse_problem,
        directives,
    )
    import numpy as np
    from simpeg.electromagnetics import frequency_domain as FDEM, time_domain as TDEM, mu_0
    import matplotlib.pyplot as plt
    import matplotlib

    try:
        from pymatsolver import Pardiso as Solver
    except ImportError:
        from simpeg import SolverLU as Solver


    def run(plotIt=True, saveFig=False):
        # Set up cylindrically symmeric mesh
        cs, ncx, ncz, npad = 10.0, 15, 25, 13  # padded cyl mesh
        hx = [(cs, ncx), (cs, npad, 1.3)]
        hz = [(cs, npad, -1.3), (cs, ncz), (cs, npad, 1.3)]
        mesh = discretize.CylindricalMesh([hx, 1, hz], "00C")

        # Conductivity model
        layerz = np.r_[-200.0, -100.0]
        layer = (mesh.cell_centers_z >= layerz[0]) & (mesh.cell_centers_z <= layerz[1])
        active = mesh.cell_centers_z < 0.0
        sig_half = 1e-2  # Half-space conductivity
        sig_air = 1e-8  # Air conductivity
        sig_layer = 5e-2  # Layer conductivity
        sigma = np.ones(mesh.shape_cells[2]) * sig_air
        sigma[active] = sig_half
        sigma[layer] = sig_layer

        # Mapping
        actMap = maps.InjectActiveCells(mesh, active, np.log(1e-8), nC=mesh.shape_cells[2])
        mapping = maps.ExpMap(mesh) * maps.SurjectVertical1D(mesh) * actMap
        mtrue = np.log(sigma[active])

        # ----- FDEM problem & survey ----- #
        rxlocs = utils.ndgrid([np.r_[50.0], np.r_[0], np.r_[0.0]])
        bzr = FDEM.Rx.PointMagneticFluxDensitySecondary(rxlocs, "z", "real")
        bzi = FDEM.Rx.PointMagneticFluxDensitySecondary(rxlocs, "z", "imag")

        freqs = np.logspace(2, 3, 5)
        srcLoc = np.array([0.0, 0.0, 0.0])

        print(
            "min skin depth = ",
            500.0 / np.sqrt(freqs.max() * sig_half),
            "max skin depth = ",
            500.0 / np.sqrt(freqs.min() * sig_half),
        )
        print(
            "max x ",
            mesh.cell_centers_x.max(),
            "min z ",
            mesh.cell_centers_z.min(),
            "max z ",
            mesh.cell_centers_z.max(),
        )

        source_list = [
            FDEM.Src.MagDipole([bzr, bzi], freq, srcLoc, orientation="Z") for freq in freqs
        ]

        surveyFD = FDEM.Survey(source_list)
        prbFD = FDEM.Simulation3DMagneticFluxDensity(
            mesh, survey=surveyFD, sigmaMap=mapping, solver=Solver
        )
        rel_err = 0.03
        dataFD = prbFD.make_synthetic_data(mtrue, relative_error=rel_err, add_noise=True)
        dataFD.noise_floor = np.linalg.norm(dataFD.dclean) * 1e-5

        # FDEM inversion
        np.random.seed(1)
        dmisfit = data_misfit.L2DataMisfit(simulation=prbFD, data=dataFD)
        regMesh = discretize.TensorMesh([mesh.h[2][mapping.maps[-1].indActive]])
        reg = regularization.WeightedLeastSquares(regMesh)
        opt = optimization.InexactGaussNewton(maxIterCG=10)
        invProb = inverse_problem.BaseInvProblem(dmisfit, reg, opt)

        # Inversion Directives
        beta = directives.BetaSchedule(coolingFactor=4, coolingRate=3)
        betaest = directives.BetaEstimate_ByEig(beta0_ratio=1.0, seed=518936)
        target = directives.TargetMisfit()
        directiveList = [beta, betaest, target]

        inv = inversion.BaseInversion(invProb, directiveList=directiveList)
        m0 = np.log(np.ones(mtrue.size) * sig_half)
        reg.alpha_s = 5e-1
        reg.alpha_x = 1.0
        prbFD.counter = opt.counter = utils.Counter()
        opt.remember("xc")
        moptFD = inv.run(m0)

        # TDEM problem
        times = np.logspace(-4, np.log10(2e-3), 10)
        print(
            "min diffusion distance ",
            1.28 * np.sqrt(times.min() / (sig_half * mu_0)),
            "max diffusion distance ",
            1.28 * np.sqrt(times.max() / (sig_half * mu_0)),
        )
        rx = TDEM.Rx.PointMagneticFluxDensity(rxlocs, times, "z")
        src = TDEM.Src.MagDipole(
            [rx],
            waveform=TDEM.Src.StepOffWaveform(),
            location=srcLoc,  # same src location as FDEM problem
        )

        surveyTD = TDEM.Survey([src])
        prbTD = TDEM.Simulation3DMagneticFluxDensity(
            mesh, survey=surveyTD, sigmaMap=mapping, solver=Solver
        )
        prbTD.time_steps = [(5e-5, 10), (1e-4, 10), (5e-4, 10)]

        rel_err = 0.03
        dataTD = prbTD.make_synthetic_data(mtrue, relative_error=rel_err, add_noise=True)
        dataTD.noise_floor = np.linalg.norm(dataTD.dclean) * 1e-5

        # TDEM inversion
        dmisfit = data_misfit.L2DataMisfit(simulation=prbTD, data=dataTD)
        regMesh = discretize.TensorMesh([mesh.h[2][mapping.maps[-1].indActive]])
        reg = regularization.WeightedLeastSquares(regMesh)
        opt = optimization.InexactGaussNewton(maxIterCG=10)
        invProb = inverse_problem.BaseInvProblem(dmisfit, reg, opt)

        # directives
        beta = directives.BetaSchedule(coolingFactor=4, coolingRate=3)
        betaest = directives.BetaEstimate_ByEig(beta0_ratio=1.0, seed=518936)
        target = directives.TargetMisfit()
        directiveList = [beta, betaest, target]

        inv = inversion.BaseInversion(invProb, directiveList=directiveList)
        m0 = np.log(np.ones(mtrue.size) * sig_half)
        reg.alpha_s = 5e-1
        reg.alpha_x = 1.0
        prbTD.counter = opt.counter = utils.Counter()
        opt.remember("xc")
        moptTD = inv.run(m0)

        # Plot the results
        if plotIt:
            plt.figure(figsize=(10, 8))
            ax0 = plt.subplot2grid((2, 2), (0, 0), rowspan=2)
            ax1 = plt.subplot2grid((2, 2), (0, 1))
            ax2 = plt.subplot2grid((2, 2), (1, 1))

            fs = 13  # fontsize
            matplotlib.rcParams["font.size"] = fs

            # Plot the model
            # z_true = np.repeat(mesh.cell_centers_z[active][1:], 2, axis=0)
            # z_true = np.r_[mesh.cell_centers_z[active][0], z_true, mesh.cell_centers_z[active][-1]]
            activeN = mesh.nodes_z <= 0.0 + cs / 2.0
            z_true = np.repeat(mesh.nodes_z[activeN][1:-1], 2, axis=0)
            z_true = np.r_[mesh.nodes_z[activeN][0], z_true, mesh.nodes_z[activeN][-1]]
            sigma_true = np.repeat(sigma[active], 2, axis=0)

            ax0.semilogx(sigma_true, z_true, "k-", lw=2, label="True")

            ax0.semilogx(
                np.exp(moptFD),
                mesh.cell_centers_z[active],
                "bo",
                ms=6,
                markeredgecolor="k",
                markeredgewidth=0.5,
                label="FDEM",
            )
            ax0.semilogx(
                np.exp(moptTD),
                mesh.cell_centers_z[active],
                "r*",
                ms=10,
                markeredgecolor="k",
                markeredgewidth=0.5,
                label="TDEM",
            )
            ax0.set_ylim(-700, 0)
            ax0.set_xlim(5e-3, 1e-1)

            ax0.set_xlabel("Conductivity (S/m)", fontsize=fs)
            ax0.set_ylabel("Depth (m)", fontsize=fs)
            ax0.grid(which="both", color="k", alpha=0.5, linestyle="-", linewidth=0.2)
            ax0.legend(fontsize=fs, loc=4)

            # plot the data misfits - negative b/c we choose positive to be in the
            # direction of primary

            ax1.plot(freqs, -dataFD.dobs[::2], "k-", lw=2, label="Obs (real)")
            ax1.plot(freqs, -dataFD.dobs[1::2], "k--", lw=2, label="Obs (imag)")

            dpredFD = prbFD.dpred(moptTD)
            ax1.loglog(
                freqs,
                -dpredFD[::2],
                "bo",
                ms=6,
                markeredgecolor="k",
                markeredgewidth=0.5,
                label="Pred (real)",
            )
            ax1.loglog(
                freqs, -dpredFD[1::2], "b+", ms=10, markeredgewidth=2.0, label="Pred (imag)"
            )

            ax2.loglog(times, dataTD.dobs, "k-", lw=2, label="Obs")
            ax2.loglog(
                times,
                prbTD.dpred(moptTD),
                "r*",
                ms=10,
                markeredgecolor="k",
                markeredgewidth=0.5,
                label="Pred",
            )
            ax2.set_xlim(times.min() - 1e-5, times.max() + 1e-4)

            # Labels, gridlines, etc
            ax2.grid(which="both", alpha=0.5, linestyle="-", linewidth=0.2)
            ax1.grid(which="both", alpha=0.5, linestyle="-", linewidth=0.2)

            ax1.set_xlabel("Frequency (Hz)", fontsize=fs)
            ax1.set_ylabel("Vertical magnetic field (-T)", fontsize=fs)

            ax2.set_xlabel("Time (s)", fontsize=fs)
            ax2.set_ylabel("Vertical magnetic field (T)", fontsize=fs)

            ax2.legend(fontsize=fs, loc=3)
            ax1.legend(fontsize=fs, loc=3)
            ax1.set_xlim(freqs.max() + 1e2, freqs.min() - 1e1)

            ax0.set_title("(a) Recovered Models", fontsize=fs)
            ax1.set_title("(b) FDEM observed vs. predicted", fontsize=fs)
            ax2.set_title("(c) TDEM observed vs. predicted", fontsize=fs)

            plt.tight_layout(pad=1.5)

            if saveFig is True:
                plt.savefig("example1.png", dpi=600)


    if __name__ == "__main__":
        run(plotIt=True, saveFig=True)
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.523 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_content_examples_20-published_plot_heagyetal2017_cyl_inversions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_heagyetal2017_cyl_inversions.ipynb <plot_heagyetal2017_cyl_inversions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_heagyetal2017_cyl_inversions.py <plot_heagyetal2017_cyl_inversions.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
